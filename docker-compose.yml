# Docker Compose for Kafka S3 Connector Development and Testing
# Includes RedPanda (Kafka), MinIO (S3), and the connector application

version: '3.8'

services:
  # RedPanda - Kafka compatible message broker
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.1
    container_name: redpanda
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp=1
      - --memory=512M
      - --reserve-memory=0M
      - --node-id=0
      - --check=false
      - --kafka-addr=PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr=PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9644:9644"
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster info"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kafka-s3-network

  # MinIO - S3 compatible object storage
  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kafka-s3-network

  # Create MinIO bucket on startup
  minio-setup:
    image: quay.io/minio/mc:latest
    container_name: minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 minioadmin minioadmin;
      mc mb --ignore-existing minio/test-data-lake;
      mc policy set public minio/test-data-lake;
      echo 'MinIO setup completed';
      "
    networks:
      - kafka-s3-network

  # Kafka S3 Connector - Worker 1
  kafka-connector-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka-connector-1
    depends_on:
      redpanda:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:29092
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin
      - CONNECT_REST_PORT=8083
      - CONNECT_GROUP_ID=kafka-s3-connect-cluster
      - CONNECT_CONFIG_STORAGE_TOPIC=connect-configs
      - CONNECT_OFFSET_STORAGE_TOPIC=connect-offsets
      - CONNECT_STATUS_STORAGE_TOPIC=connect-status
    ports:
      - "8083:8083"
      - "8081:8081"
    volumes:
      - connector_logs_1:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - kafka-s3-network

  # Kafka S3 Connector - Worker 2 (for horizontal scaling testing)
  kafka-connector-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka-connector-2
    depends_on:
      redpanda:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:29092
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin
      - CONNECT_REST_PORT=8084
      - CONNECT_GROUP_ID=kafka-s3-connect-cluster
      - CONNECT_CONFIG_STORAGE_TOPIC=connect-configs
      - CONNECT_OFFSET_STORAGE_TOPIC=connect-offsets
      - CONNECT_STATUS_STORAGE_TOPIC=connect-status
    ports:
      - "8084:8084"
      - "8082:8081"
    volumes:
      - connector_logs_2:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - kafka-s3-network
    profiles:
      - scaling

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-lifecycle
    networks:
      - kafka-s3-network
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - kafka-s3-network
    profiles:
      - monitoring

volumes:
  minio_data:
    driver: local
  connector_logs_1:
    driver: local
  connector_logs_2:
    driver: local
  grafana_data:
    driver: local

networks:
  kafka-s3-network:
    driver: bridge
    name: kafka-s3-network